@use "../../index.scss";

$gameboard-width: min(calc(100vh - var(--header-height)), 100vw);
$gameboard-gap: 0.25em;

$piece-size: 0.75;

$cell-states: playedFrom, playedTo, move, attack, promote, castle, enPassant, checked, selected, ready;
$cell-state-colours: #ffd700, #ffd700, #0044ff, #f31818, #10f568, #9b0ba8, #9b0ba8, #801616, #ff4500, #20b2aa;

#gameboard-body {
    --padding: 1rem;

    position: relative;

    padding: var(--padding);

    #gameboard {
        --padding-: 0rem;

        position: absolute;
        left: 50%;
        transform: translate(-50%);

        width: calc($gameboard-width - var(--padding) * 2);
        aspect-ratio: 1;

        display: grid;
        grid-template-columns: repeat(8, 1fr);
        grid-template-rows: repeat(8, 1fr);
        place-content: center;
        place-items: center;
        gap: $gameboard-gap;

        padding: var(--padding-);

        background-color: var(--board-colour);

        box-sizing: border-box;
        border: $gameboard-gap solid var(--board-colour);

        &.gameboard-without-hint-movements .cell:not(.selected-cell, .ready-cell, .playedFrom-cell, .playedTo-cell, .checked-cell),
        &.gameboard-without-played-movements .cell:not(.selected-cell, .ready-cell, .checked-cell) {
            box-shadow: none !important;

            &:not(:hover, :focus-within) {
                transform: scale(1) !important;
            }
        }

        .cell {
            position: relative;

            width: 100%;
            height: 100%;

            background-color: var(--light-colour);

            transition: transform 500ms, box-shadow 500ms;

            @for $i from 0 to 8 {
                $is-even: $i % 2;
                $from: calc($i * 8 - $is-even);
                $to: calc(($i + 1) * 8 - $is-even);

                &:not(:nth-child(-2n + #{$from})):nth-child(-2n + #{$to}) {
                    background-color: var(--dark-colour);

                    position: relative;

                    &::before,
                    &::after {
                        color: var(--light-colour);
                    }
                }
            }

            @mixin emphasize-cell() {
                --modifier: 0.9;

                transform: scale(var(--modifier));

                &::before,
                &::after {
                    --margin-modifier-left: calc((var(--modifier) * -1 / var(--modifier)));
                    --margin-modifier-bottom: calc((var(--modifier) * -1 / var(--modifier)));
                    --scale-modifier: calc(1 / var(--modifier));
                }
            }

            &:is(:hover, :focus-within) {
                @include emphasize-cell();
            }

            @each $cell-state in $cell-states {

                &.#{$cell-state}-cell {
                    $cell-state-colour: nth($list: $cell-state-colours, $n: index($list: $cell-states, $value: $cell-state));

                    @include emphasize-cell();
                    @include index.box-shadow($thickness: min(0.3rem, 0.45vw), $colour: $cell-state-colour);
                }
            }

            &:nth-child(8n + 1),
            &:nth-child(n + #{calc(8 * 8 - 8 + 1)}) {
                $offset: 0.1rem;
                --margin-modifier-left: -0.95;
                --margin-modifier-bottom: -1.15;
                --scale-modifier: 1;

                &::before,
                &::after {
                    font-weight: bold;
                    font-size: 75%;

                    position: absolute;

                    display: flex;
                    flex-direction: column;
                    place-content: center;
                    place-items: center;

                    color: var(--dark-colour);

                    transition: left 500ms, bottom 500ms, transform 500ms;
                }

                &::before {
                    bottom: $offset;
                    left: $offset;
                    transform: scale(var(--scale-modifier));
                }

                &::after {
                    left: $offset;
                    bottom: $offset;
                    transform: scale(var(--scale-modifier));
                }
            }

            &:nth-child(8n + 1)::before {
                content: attr(data-number);
            }

            &:nth-child(n + #{calc(8 * 8 - 8 + 1)})::after {
                content: attr(data-character);
            }

            &:nth-child(8n + 1):nth-child(n + #{calc(8 * 8 - 8 + 1)}) {

                &::before {
                    content: attr(data-number) attr(data-character);
                }

                &::after {
                    content: none;
                }
            }

            svg {
                $size: calc($piece-size * 100%);

                width: $size;
                height: $size;
            }

            &.dragged-cell svg {
                display: none;
            }
        }
    }
}

#dragged-piece {
    position: absolute;
    top: -100%;
    left: -100%;
    transform: translate(-50%, -50%);

    width: calc(($gameboard-width - $gameboard-gap * 2) / 8 * $piece-size);
    aspect-ratio: 1;

    pointer-events: none;

    z-index: 10;
}

svg.piece {
    filter: drop-shadow(0.35rem 0.35rem 0 black) saturate(150%);
}

.alter-piece-colours svg.piece {

    &-white path {
        fill: var(--light-colour);
        stroke: var(--dark-colour);
    }

    &-black path {
        fill: var(--dark-colour);
        stroke: var(--light-colour);
    }
}

@media (min-width: index.$second-screen-width) {

    #gameboard {
        --padding-: 1.25em !important;

        border-color: var(--light-colour) !important;

        .cell {

            &::before,
            &::after {
                color: var(--light-colour) !important;
            }

            &::before {
                top: 50% !important;
                left: calc(var(--padding-) * var(--margin-modifier-left)) !important;
                transform: translateY(-50%) scale(var(--scale-modifier)) !important;
            }

            &::after {
                left: 50% !important;
                bottom: calc(var(--padding-) * var(--margin-modifier-bottom)) !important;
                transform: translateX(-50%) scale(var(--scale-modifier)) !important;
            }

            &:nth-child(8n + 1):nth-child(n + #{calc(8 * 8 - 8 + 1)}) {

                &::before {
                    content: attr(data-number) !important;
                }

                &::after {
                    content: attr(data-character) !important;
                }
            }
        }
    }
}

@media (min-width: index.$first-screen-width) {

    #gameboard {
        left: var(--padding) !important;
        transform: translate(0, 0) !important;

        background-color: red;
    }
}