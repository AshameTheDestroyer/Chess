$gameboard-width: calc(100vmin - var(--header-height) - 2rem * 2);
$gameboard-gap: 0.3rem;
$piece-size: 0.75;
$cell-states: selected, ready, played-from, played-to;
$cell-states-with-circle: played-from;
$cell-state-colours: orangered, lightseagreen, gold, gold;

#gameboard-body {
    position: relative;

    #gameboard {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);

        width: $gameboard-width;
        aspect-ratio: 1;

        background-color: var(--background-darker-colour);

        display: grid;
        grid-template-columns: repeat(8, 1fr);
        grid-template-rows: repeat(8, 1fr);
        place-content: center;
        place-items: center;
        gap: $gameboard-gap;

        padding: $gameboard-gap;

        .cell {
            position: relative;

            width: 100%;
            height: 100%;

            background-color: var(--fore-colour);

            transition: transform 500ms, box-shadow 500ms;

            @for $i from 0 to 8 {
                $is-even: $i % 2;
                $from: calc($i * 8 - $is-even);
                $to: calc(($i + 1) * 8 - $is-even);

                &:not(:nth-child(-2n + #{$from})):nth-child(-2n + #{$to}) {
                    background-color: var(--background-colour);

                    &::after {
                        color: var(--fore-colour);
                    }
                }
            }

            @mixin emphasize-cell() {
                transform: scale(0.9);
            }

            &:is(:hover, :focus-within) {
                @include emphasize-cell();
            }

            @each $cell-state in $cell-states {
                &.#{$cell-state}-cell {
                    @include emphasize-cell();

                    $cell-state-colour: nth($list: $cell-state-colours, $n: index($list: $cell-states, $value: $cell-state));

                    box-shadow: 0.25rem 0.25rem 0.75rem $cell-state-colour,
                        -0.25rem 0.25rem 0.75rem $cell-state-colour,
                        0.25rem -0.25rem 0.75rem $cell-state-colour,
                        -0.25rem -0.25rem 0.75rem $cell-state-colour,
                    ;

                    @if (index($list: $cell-states-with-circle, $value: $cell-state)) {
                        position: relative;

                        &::before {
                            content: "";

                            position: absolute;
                            inset: 35%;

                            background-color: $cell-state-colour;

                            border-radius: 100%;

                            box-shadow: 0.25rem 0.25rem 0.75rem $cell-state-colour,
                                -0.25rem 0.25rem 0.75rem $cell-state-colour,
                                0.25rem -0.25rem 0.75rem $cell-state-colour,
                                -0.25rem -0.25rem 0.75rem $cell-state-colour,
                            ;

                            opacity: 0.75;
                        }
                    }
                }
            }

            &:nth-child(8n + 1),
            &:nth-child(n + #{calc(8 * 8 - 8 + 1)}) {

                &::after {
                    font-weight: bold;

                    position: absolute;
                    left: 0.5rem;
                    bottom: 0.5rem;

                    display: flex;
                    flex-direction: column;
                    place-content: center;
                    place-items: center;

                    color: var(--background-colour);
                }
            }

            &:nth-child(8n + 1)::after {
                content: attr(data-number);
            }

            &:nth-child(n + #{calc(8 * 8 - 8 + 1)})::after {
                content: attr(data-character);
            }

            &:nth-child(8n + 1):nth-child(n + #{calc(8 * 8 - 8 + 1)})::after {
                content: attr(data-number) " " attr(data-character);
            }

            img {
                width: calc($piece-size * 100%);
                aspect-ratio: 1;

                filter: drop-shadow(0.35rem 0.35rem 0 black);
            }

            &.dragged-cell img {
                display: none;
            }
        }
    }
}

#dragged-piece {
    position: absolute;
    top: 0;
    left: 0;

    width: calc(($gameboard-width - $gameboard-gap * 2) / 8 * $piece-size);
    aspect-ratio: 1;

    transform: translate(-50%, -50%);

    filter: drop-shadow(0.35rem 0.35rem 0 black);

    pointer-events: none;

    z-index: 10;
}